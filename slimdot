#!/usr/bin/env bash

# slimdot is a simple script for deploying symlinks to dotfiles
# Copyright (C) 2025 Boris Chirva
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <https://www.gnu.org/licenses/>.

_print_help() {
    cat <<EOF
Usage: slimdot [OPTIONS] [ENTRY1 ENTRY2 ...]

Slimdot — a simple tool for managing symlinks to dotfiles.

Built-in entries:
  all                Create symlinks for all dotfiles, execute all actions [default]
  clear              Remove all created symlinks from your home directory

Options:
  -d, --dotfile-dir DIR   Set the dotfiles directory (default: current working dir)
  -n, --dry-run           Only show what would be done, without executing
  -v, --verbose           Print detailed output of operations
  -h, --help              Show this help message and exit
  --version               Print version

Argument types:
  dotfiles          Names of dotfiles to symlink (files and/or directories in the repository)
  rules             Named groups of dotfiles and/or actions (defined in config)
  actions           Named shell commands/scripts/functions to execute (defined in config)

Configuration:
  Slimdot reads its configuration from a .slimdotrc file in the dotfiles directory.
  The following variables are supported:
    SLIMDOT_IGNORE     — list of files and/or directories to ignore
    SLIMDOT_RULES      — custom rules (name + list of dotfiles/actions)
    SLIMDOT_ACTIONS    — custom actions (name + shell command/function/script)

Examples:
  slimdot all
      symlink all dotfiles and run all actions
  slimdot zshrc
      symlink .zshrc into \$HOME
  slimdot clear -n
      show which symlinks would be removed (dry-run)

EOF
}

readonly VERSION="0.0.0"

_entry_name() {
    echo "$1" | sed -E 's/^[[:space:]]+//' | awk '{print $1}'
}

_entry_value() {
   echo "$1" | awk '{ $1=""; sub(/^ /, ""); print }'
}

_destination_symlink_name() {
    local -r dotfile_source=$1
    symlink=

    if [ -f "${DOTFILES_DIR}/${dotfile_source}" ]; then 
        symlink="${HOME}/.${dotfile_source}"
    elif [ -d "${DOTFILES_DIR}/${dotfile_source}" ]; then 
        symlink="${CONFIG_HOME_DIR}/${dotfile_source}"
    fi 

    echo "$symlink"
}

_get_from_list() {
    local -r entry="$1"
    case $2 in 
        rules) local -r list=("${RULES_LIST[@]}") ;;
        actions) local -r list=("${ACTIONS_LIST[@]}") ;;
        *) return 1 ;;
    esac 

    for item in "${list[@]}"; do 
        if [[ $(_entry_name "${item}") == "${entry}" ]]; then 
            echo "${item}"
            return 0
        fi
    done 
    return 1
}

_list_unique() {
    case $1 in 
        dotfiles) 
            local -r list=("${DOTFILES_LIST[@]}")
            DOTFILES_LIST=()
            ;;
        actions) 
            local -r list=("${ACTIONS_LIST[@]}") 
            ACTIONS_LIST=()
            ;;
        *) return 1 ;;
    esac 

    tmplist=$(mktemp)

    for item in "${list[@]}"; do 
        echo "${item}"
    done | sort -u > "${tmplist}"

    while IFS= read -r line; do 
        case $1 in 
            dotfiles) DOTFILES_LIST+=("${line}") ;;
            actions) ACTIONS_LIST+=("${line}") ;;
        esac
    done < "${tmplist}"

    rm -f "${tmplist}"
}

_is_dotfile() {
    local -r entry="$1"
    for dotfile in "${DOTFILES_LIST[@]}"; do 
        if [[ $(basename "${dotfile}") == "${entry}" ]]; then 
            return 0
        fi 
    done 
    return 1
}

_clear() {
    for dotfile in "${DOTFILES_LIST[@]}"; do 
        symlink="$(_destination_symlink_name "${dotfile}")"

        if stat --version >/dev/null 2>&1; then # GNU/Linux
            mod_time() { stat -c '%Y' "$1"; }
        else # BSD/macOS
            mod_time() { stat -f '%m' "$1"; }
        fi

        local last_backup=
        shopt -s nullglob
        backups=( "${symlink}".backup* )
        shopt -u nullglob
        if (( ${#backups[@]} > 0 )); then
                last_backup="$(
                printf '%s\n' "${backups[@]}" \
                | while IFS= read -r f; do
                    printf '%s\t%s\n' "$(mod_time "$f")" "$f"
                done | sort -n | tail -n 1 | cut -f2- )"
        fi

        if [ -L "${symlink}" ] && [ "$(readlink "${symlink}")" == "${DOTFILES_DIR}/${dotfile}" ]; then 
            if [[ ! "${DRY_RUN}" ]]; then 
                rm "${symlink}"

                if [[ -n "${last_backup}" ]] && [[ -e "${last_backup}" ]]; then 
                    mv "${last_backup}" "${symlink}"
                fi 
            fi 

            if [[ "${VERBOSE_STDOUT}" || "${DRY_RUN}" ]]; then 
                echo "Remove symlink ${symlink}"

                if [[ -n "${last_backup}" ]] && [[ -e "${last_backup}" ]]; then 
                    echo "Backup for ${symlink} restored"
                fi
            fi 
        fi 
    done 
}

# Declare internal parameters
# ---------------------------
DOTFILES_DIR="${PWD}"
CONFIG_HOME_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
DRY_RUN=
VERBOSE_STDOUT=
SELECTED_ENTRIES=()

# Parse command-line arguments
# ----------------------------
while (( $# > 0 )); do
    case "$1" in 
        -d|--dotfile-dir)
            DOTFILES_DIR="$2"
            shift 
        ;;
        -n|--dry-run) 
            DRY_RUN=1 
        ;;
        -h|--help)
            _print_help
            exit 0
        ;;
        -v|--verbose)
            VERBOSE_STDOUT=1
        ;;
        --version) 
            echo "slimdot ${VERSION}"
            exit 0
        ;;
        *)
            SELECTED_ENTRIES+=("$1")
        ;;
    esac 
    shift 
done 

if (( ${#SELECTED_ENTRIES[@]} == 0 )); then 
    SELECTED_ENTRIES+=(all)
fi

# Source dotfile repo config file
# -------------------------------
if [[ -f "${DOTFILES_DIR}/.slimdotrc" ]]; then 
    . "${DOTFILES_DIR}/.slimdotrc"
fi 

# Setup variables
# ---------------
readonly SLIMDOT_DEFAULT_IGNORE=(
    .git 
    .gitignore 
    .gitmodules 
    .github 
    .gitlab
    README 
    LICENSE 
    COPYING
    .slimdotrc
    )
readonly IGNORES_LIST=("${SLIMDOT_DEFAULT_IGNORE[@]}" "${SLIMDOT_IGNORE[@]}")

DOTFILES_LIST=()
for dotfile in "${DOTFILES_DIR}"/{*,.*}; do 
    dotfile_name=$(basename "${dotfile}")
    is_ignored=
    for ignore in "${IGNORES_LIST[@]}"; do 
        if [[ "${ignore}" == "${dotfile_name}" ]]; then 
            is_ignored=1
            break 
        fi 
    done 
    if [[ ${is_ignored} ]]; then 
        continue 
    fi 
    DOTFILES_LIST+=("${dotfile_name}")
done 

readonly SLIMDOT_DEFAULT_ACTIONS=(
    "clear _clear"
)
ACTIONS_LIST=(
    "${SLIMDOT_DEFAULT_ACTIONS[@]}" "${SLIMDOT_ACTIONS[@]}"
)
readonly SLIMDOT_DEFAULT_RULES=(
    "all ${DOTFILES_LIST[*]} ${SLIMDOT_ACTIONS[*]}"
)
RULES_LIST=(
    "${SLIMDOT_DEFAULT_RULES[@]}" "${SLIMDOT_RULES[@]}"
)

# Make lists of entries to symlink
# --------------------------------
DOTFILES_TO_SYMLINK=()
RULES_TO_EXECUTE=()
ACTIONS_TO_EXECUTE=()

for entry in "${SELECTED_ENTRIES[@]}"; do 
    # Resolve entry type
    rule=$(_get_from_list "${entry}" rules)
    if [[ "${rule}" ]]; then 
        RULES_TO_EXECUTE+=("${rule}")
        continue
    fi 

    action=$(_get_from_list "${entry}" actions)
    if [[ "${action}" ]]; then 
        ACTIONS_TO_EXECUTE+=("${action}")
        continue
    fi 

    # Check if dotfile in IGNORED list
    if _is_dotfile "${entry}"; then 
        is_ignore=
        for ignore in "${IGNORES_LIST[@]}"; do
            if [[ "${ignore}" == "${entry}" ]]; then 
                is_ignore=1
                break
            fi 
        done 
        if [[ ! "${is_ignore}" ]]; then  
            DOTFILES_TO_SYMLINK+=("${entry}")
        fi
        continue
    fi

    echo "WARNING: \"${entry}\" entry is not recognized. It's neither dotfile, rule or action."
done 

# Expand rules
# ------------
i=0
while (( i < ${#RULES_TO_EXECUTE[@]} )); do
    read -ra entries <<< "$(_entry_value "${RULES_TO_EXECUTE[${i}]}")"

    for entry in "${entries[@]}"; do 

        rule=$(_get_from_list "${entry}" rules)
        if [[ -n "${rule}" && "$(_entry_name "${rule}")" != "${entry}" ]]; then 
            RULES_TO_EXECUTE+=("${rule}")
            continue 
        fi

        action=$(_get_from_list "${entry}" actions)
        if [[ "${action}" ]]; then 
            ACTIONS_TO_EXECUTE+=("${action}")
            continue 
        fi 

        if _is_dotfile "${entry}"; then 
            DOTFILES_TO_SYMLINK+=("${entry}")
            continue 
        fi 
    done 
    (( i++ ))
done 

_list_unique dotfiles
_list_unique actions

# Create symlinks
# ---------------
for dotfile in "${DOTFILES_TO_SYMLINK[@]}"; do 
    symlink="$(_destination_symlink_name "${dotfile}")"

    if [ -L "${symlink}" ] && [ "$(readlink "${symlink}")" == "${DOTFILES_DIR}/${dotfile}" ]; then
        continue 
    fi

    backup=""
    if [ -e "${symlink}" ]; then 
        backup="${symlink}.backup"
        i=1
        while [ -e "${backup}" ]; do  
            ((i++))
            backup="${symlink}.backup.$i"
        done 
    fi 

    if [[ ! "${DRY_RUN}" ]]; then 
        if [[ -n "${backup}" ]]; then 
            mv "${symlink}" "${backup}"
        fi
        ln -sf "${DOTFILES_DIR}/${dotfile}" "${symlink}"
    fi 
    if [[ "${VERBOSE_STDOUT}" || "${DRY_RUN}" ]]; then 
        if [[ -n "$backup" ]]; then 
            echo "Make backup ${symlink} ${backup}"
        fi
        echo "Create symlink for ${dotfile} in ${symlink}"
    fi 
done 

# Execute actions
# ---------------
for action in "${ACTIONS_TO_EXECUTE[@]}"; do 
    action_name="$(_entry_name "${action}")"
    cmd=$(_entry_value "${action}")

    if [[ "${VERBOSE_STDOUT}" || "${DRY_RUN}" ]]; then 
        echo -e "Execute action \"${action_name}\": ${cmd}"
    fi 
    if [[ ! "$DRY_RUN" || "${action_name}" == "clear" ]] && [[ -n "${cmd}" ]]; then 
        $cmd
    fi 
done 

